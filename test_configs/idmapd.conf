# idmapd - NFSv4 id <-> name mapper

# rpc.idmapd is the NFSv4 ID <-> name mapping daemon.  It provides
# functionality to the NFSv4 kernel client and server, to which it
# communicates via upcalls, by translating user and group IDs to names, and
# vice versa.

description	"NFSv4 id <-> name mapper"
author		"Steve Langasek <steve.langasek@canonical.com>"

start on (local-filesystems or mounting TYPE=nfs4)
stop on runlevel [06]

expect fork
respawn

env DEFAULTFILE=/etc/default/nfs-common

pre-start script
	do_modprobe() {
		modprobe -q "$1" || true
	}

	if [ -f "$DEFAULTFILE" ]; then
		. "$DEFAULTFILE"
	fi

	#
	# Parse the fstab file, and determine whether we need idmapd. (The
	# /etc/defaults settings, if any, will override our autodetection.)
	# This code is partially adapted from the mountnfs.sh script in the
	# sysvinit package.

	if [ -f /etc/fstab ]; then
		exec 9<&0 </etc/fstab

		while read DEV MTPT FSTYPE OPTS REST
		do
			if [ "$FSTYPE" = "nfs4" ]; then
				AUTO_NEED_IDMAPD=yes
			fi
		done

		exec 0<&9 9<&-
	fi

	#
	# We also need idmapd if we run an NFSv4 server. It's fairly difficult
	# to autodetect whether there are NFSv4 exports or not, and idmapd is not a
	# particularily heavy daemon, so we auto-enable it if we find an /etc/exports
	# file. This does not mean that there are NFSv4 or other mounts active (or
	# even that nfs-kernel-server is installed), but it matches what the "start"
	# condition in nfs-kernel-server's init script does, which has a value in
	# itself.
	#
	if [ -f /etc/exports ] && grep -q '^[[:space:]]*[^#]*/' /etc/exports; then
		AUTO_NEED_IDMAPD=yes
	fi

	case "$NEED_IDMAPD" in
		yes|no)	
			;;
		*)
			NEED_IDMAPD=$AUTO_NEED_IDMAPD
			;;
	esac
	[ "x$NEED_IDMAPD" = xyes ] || { stop; exit 0; }

	do_modprobe nfs
	do_modprobe nfsd
end script

script
	if [ -f "$DEFAULTFILE" ]; then
		. "$DEFAULTFILE"
	fi

	exec rpc.idmapd
end script
