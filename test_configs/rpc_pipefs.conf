description	"mount the rpc_pipefs filesystem for NFSv4"
author		"Steve Langasek <steve.langasek@canonical.com>"

start on (starting gssd
          or starting idmapd)
stop on (stopped gssd and stopped idmapd)

env PIPEFS_MOUNTPOINT=/var/lib/nfs/rpc_pipefs

pre-start script
	DEFAULTFILE=/etc/default/nfs-common
	if [ -f "$DEFAULTFILE" ]; then
		. "$DEFAULTFILE"
	fi

	#
	# Parse the fstab file, and determine whether we need idmapd and gssd.
	# (The /etc/defaults settings, if any, will override our
	# autodetection.)  This code is partially adapted from the mountnfs.sh
	# script in the sysvinit package.

	if [ -f /etc/fstab ]; then
		exec 9<&0 </etc/fstab

		while read DEV MTPT FSTYPE OPTS REST
		do
			if [ "$FSTYPE" = "nfs4" ]; then
				AUTO_NEED_IDMAPD=yes
			fi
			case "$OPTS" in
				sec=krb5|*,sec=krb5|sec=krb5,*|*,sec=krb5,*|sec=krb5i|*,sec=krb5i|sec=krb5i,*|*,sec=krb5i,*|sec=krb5p|*,sec=krb5p|sec=krb5p,*|*,sec=krb5p,*)
					AUTO_NEED_GSSD=yes
            				;;
			esac
		done

		exec 0<&9 9<&-
	fi

	#
	# We also need idmapd if we run an NFSv4 server. It's fairly difficult
	# to autodetect whether there are NFSv4 exports or not, and idmapd is not a
	# particularily heavy daemon, so we auto-enable it if we find an /etc/exports
	# file. This does not mean that there are NFSv4 or other mounts active (or
	# even that nfs-kernel-server is installed), but it matches what the "start"
	# condition in nfs-kernel-server's init script does, which has a value in
	# itself.
	#
	if [ -f /etc/exports ] && grep -q '^[[:space:]]*[^#]*/' /etc/exports; then
		AUTO_NEED_IDMAPD=yes
	fi

	case "$NEED_IDMAPD" in
		yes|no)	
			;;
		*)
			NEED_IDMAPD=$AUTO_NEED_IDMAPD
			;;
	esac

	case "$NEED_GSSD" in
		yes|no)	
			;;
		*)
			NEED_GSSD=$AUTO_NEED_GSSD
			;;
	esac

	if [ "x$NEED_IDMAPD" != xyes ] && [ "x$NEED_GSSD" != xyes ]; then
		stop
		exit 0
	fi

	modprobe -q sunrpc || true

	if ! mountpoint -q "$PIPEFS_MOUNTPOINT"
	then
		mount -t rpc_pipefs rpc_pipefs "$PIPEFS_MOUNTPOINT"
	fi
end script

post-stop script
	if mountpoint -q "$PIPEFS_MOUNTPOINT"
	then
		umount "$PIPEFS_MOUNTPOINT"
	fi
end script
